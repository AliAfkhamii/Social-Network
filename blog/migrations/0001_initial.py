# Generated by Django 3.2.5 on 2022-03-03 20:35

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
        ('taggit', '0003_taggeditem_add_unique_index'),
    ]

    operations = [
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=256, verbose_name='title')),
                ('image', models.ImageField(blank=True, null=True, upload_to='post_images/', verbose_name='image')),
                ('file', models.FileField(blank=True, null=True, upload_to='', verbose_name='File')),
                ('slug', models.SlugField(allow_unicode=True, blank=True, max_length=100, null=True, verbose_name='slug')),
                ('content', models.TextField(verbose_name='content')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('date_edited', models.DateTimeField(auto_now=True, verbose_name='date edited')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='accounts.profile', verbose_name='author')),
                ('post_tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='post tags')),
            ],
            options={
                'verbose_name': 'Post',
                'verbose_name_plural': 'Posts',
                'ordering': ('-date_created',),
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(null=True, verbose_name='text')),
                ('created', models.DateTimeField(auto_now_add=True, null=True, verbose_name='date created')),
                ('pinned', models.BooleanField(default=False, verbose_name='pinned')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='blog.comment', verbose_name='replied to')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='blog.post', verbose_name='post')),
                ('user', models.ForeignKey(on_delete=models.SET('from a deleted user'), to='accounts.profile', verbose_name='user')),
            ],
            options={
                'verbose_name': 'Comment',
                'verbose_name_plural': 'Comments',
                'ordering': ('created',),
            },
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date created')),
                ('updated', models.DateTimeField(auto_now_add=True, verbose_name='date updated')),
                ('value', models.SmallIntegerField(blank=True, choices=[(1, 'VERY_BAD'), (2, 'BAD'), (3, 'OK'), (4, 'GOOD'), (5, 'PERFECT')], null=True, verbose_name='star')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='blog.post', verbose_name='post')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes_given', to='accounts.profile', verbose_name='profile voted')),
            ],
            options={
                'verbose_name': 'Vote',
                'verbose_name_plural': 'Votes',
                'ordering': ('created',),
                'unique_together': {('post', 'profile')},
            },
        ),
    ]
